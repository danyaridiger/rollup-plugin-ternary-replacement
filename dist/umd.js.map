{"version":3,"file":"umd.js","sources":["../modules/jsx-parser.js","../modules/parser-options.js","../transforms/convert-non-null-merge.js","../transforms/convert-merge-assignment.js","../transforms/convert-logical-multiply-assignment.js","../modules/RollupPluginTernaryReplacementError.js","../index.js"],"sourcesContent":["import jsx from \"acorn-jsx\";\r\nimport * as acorn from \"acorn\";\r\n\r\n/**\r\n * Code parser extended by jsx plugin\r\n * @constant {acorn.Parser} JSXParser\r\n */\r\nexport default acorn.Parser.extend(jsx());","/**\r\n * @typedef {object} Plugins\r\n * @property {boolean} jsx - jsx syntax flag\r\n */\r\n\r\n/**\r\n * @type {object}\r\n * @property {boolean} allowReserved - reserved keyword restriction flag\r\n * @property {boolean} allowImportExportEverywhere - esm operator restriction flag\r\n * @property {boolean} allowHashBang - hashbang comments restriction flag\r\n * @property {number} ecmaVersion - ECMAScript version\r\n * @property {string} sourceType - source program type\r\n * @property {Plugins} plugins - plugin options\r\n */\r\nexport default {\r\n  allowReserved: true,\r\n  allowImportExportEverywhere: true,\r\n  allowHashBang: true,\r\n  ecmaVersion: 13,\r\n  sourceType: 'module',\r\n  plugins: {\r\n    jsx: true,\r\n  },\r\n};","import escodegen from \"escodegen\";\r\nimport JSXParser from \"../modules/jsx-parser\";\r\nimport parserOptions from \"../modules/parser-options\";\r\n\r\n/**\r\n * Transforms given code replacing non-null \r\n * merge operators with ternary operators\r\n * @function\r\n * @param {Node} fragment - code fragment to search in\r\n * @returns {string} code\r\n */\r\nexport default function convertNonNullMerge(fragment) {\r\n  const identifier = fragment.left.raw || fragment.left.name;\r\n  const finalString = `${identifier} !== null && ${identifier} !== undefined`;\r\n  const fragmentToReplace = JSXParser.parse(finalString, parserOptions);\r\n  const newFragment = escodegen.generate({\r\n    type: \"ConditionalExpression\",\r\n    test: fragmentToReplace,\r\n    consequent: fragment.left,\r\n    alternate: fragment.right,\r\n  });\r\n  \r\n  return newFragment.replace(\";\", \"\");\r\n}","import escodegen from \"escodegen\";\r\nimport JSXParser from \"../modules/jsx-parser\";\r\nimport parserOptions from \"../modules/parser-options\";\r\n\r\n/**\r\n * Transforms given code replacing non-null \r\n * merge assignments with ternary operators\r\n * @function\r\n * @param {Node} fragment - code fragment to search in\r\n * @returns {string} code\r\n */\r\nexport default function convertMergeAssignment(fragment) {\r\n  const identifier = fragment.left.raw || fragment.left.name;\r\n  const appropriator = fragment.right.raw || fragment.right.name;\r\n  const finalString = `\r\n    ${identifier} !== null && ${identifier} !== undefined \r\n     ? ${identifier} = ${appropriator} \r\n     : false`;\r\n\r\n  const fragmentToReplace = JSXParser.parse(finalString, parserOptions);\r\n  const expression = fragmentToReplace.body[0].expression;\r\n  const newFragment = escodegen.generate(expression);\r\n\r\n  return newFragment;\r\n}","import escodegen from \"escodegen\";\r\nimport JSXParser from \"../modules/jsx-parser\";\r\nimport parserOptions from \"../modules/parser-options\";\r\n\r\n/**\r\n * Transforms given code replacing logical \r\n * assignments with ternary operators\r\n * @function\r\n * @param {Node} fragment - code fragment to search in\r\n * @param {boolean} [additionAssignment=false] - addition assignment operator flag\r\n * @returns {string} code\r\n */\r\nexport default function convertLogicalAssignment(fragment, additionAssignment = false) {\r\n  const identifier = fragment.left.raw || fragment.left.name;\r\n  const appropriator = fragment.right.raw || fragment.right.name;\r\n\r\n  let finalString = `${identifier} ? ${identifier} = ${appropriator} : false`;\r\n\r\n  finalString = additionAssignment ? finalString : `!${finalString}`;\r\n\r\n  const fragmentToReplace = JSXParser.parse(finalString, parserOptions);\r\n  const expression = fragmentToReplace.body[0].expression;\r\n  const newFragment = escodegen.generate(expression);\r\n\r\n  return newFragment;\r\n}","/**\r\n * Local Error instance\r\n * @class\r\n * @extends Error\r\n */\r\nexport default class RollupPluginTernaryReplacementError extends Error {}","import walk from \"estree-visitor\";\r\nimport MagicString from \"magic-string\";\r\nimport { extname } from \"path\";\r\nimport { createFilter } from \"@rollup/pluginutils\";\r\nimport JSXParser from \"./modules/jsx-parser.js\";\r\nimport parserOptions from \"./modules/parser-options\";\r\nimport convertNonNullMerge from \"./transforms/convert-non-null-merge.js\";\r\nimport convertMergeAssignment from \"./transforms/convert-merge-assignment.js\";\r\nimport convertLogicalMultiplyAssignment from \"./transforms/convert-logical-multiply-assignment.js\";\r\nimport RollupPlaginTernaryReplacementError from \"./modules/RollupPluginTernaryReplacementError.js\";\r\n\r\n/**\r\n * @typedef {object} Options\r\n * @property {Array} [exclude] - list of file/directory patterns that should be excluded from plugin launch\r\n * @property {Array} [excludeExtentions] - list of file extensions that should be excluded from plugin launch\r\n * @property {boolean} [includeSourceMap] - enable source map flag\r\n * @property {boolean} [nonNullMergesOnly] - transform assignments disable flag\r\n * @property {boolean} [assignmentsOnly] - transform non-null merges disable flag\r\n */\r\n\r\n/**\r\n * @typedef {object} Transform\r\n * @method transform - transforms given code fragment from each file\r\n */\r\n\r\n/**\r\n * @typedef {object} TransformResult\r\n * @property {string} code - transformed code\r\n * @property {SourceMap} map - transformed source map\r\n */\r\n\r\n/**\r\n * Transforms source code according to options requirements\r\n * @author Ridiger Daniil Dmitrievich, 2023\r\n * @function\r\n * @param {Options} [options = {}] - plugin options\r\n * @returns {Transform} transformation\r\n * @version 0.0.2\r\n */\r\nmodule.exports = function rollupPluginTernaryReplacement(options = {}) {\r\n  const exclude = options.exclude ? options.exclude.map((path) => new RegExp(path, \"i\")) : [];\r\n  const include = createFilter([], exclude);\r\n  const excludeExtentions = options.excludeExtentions || [];\r\n  const includeSourceMap = options.includeSourceMap;\r\n  const nonNullMergesOnly = options.nonNullMergesOnly;\r\n  const assignmentsOnly = options.assignmentsOnly;\r\n  \r\n  return {\r\n    /**\r\n     * Transforms given code fragment from each file\r\n     * @method\r\n     * @param {string} code - code from each file\r\n     * @param {string} path - path to each file\r\n     * @returns {TransformResult} code\r\n     */\r\n    transform: (code, path) => {\r\n      if (excludeExtentions.includes(extname(path).slice(1)) || !include(path)) {\r\n        return null;\r\n      }\r\n\r\n      let node;\r\n\r\n      try {\r\n        node = JSXParser.parse(code, parserOptions);\r\n      } catch(error) {\r\n        throw new RollupPlaginTernaryReplacementError(`${error.message} â€” thrown in ${path}`);\r\n      }\r\n\r\n      const magicString = new MagicString(code);\r\n\r\n      walk(node, {\r\n        /**\r\n         * Replaces given nodes with new ones if necessary\r\n         * @method\r\n         * @param {Node} fragment \r\n         * @returns {MagicString} node\r\n         */\r\n        enter: (fragment) => {\r\n          if (fragment.operator && fragment.operator === \"??\" && !assignmentsOnly) {\r\n            const newFragment = convertNonNullMerge(fragment);\r\n\r\n            magicString.overwrite(fragment.start, fragment.end, newFragment);\r\n          }\r\n\r\n          if (fragment.operator && fragment.operator === \"&&=\" && !nonNullMergesOnly) {\r\n            const newFragment = convertLogicalMultiplyAssignment(fragment);\r\n\r\n            magicString.overwrite(fragment.start, fragment.end, newFragment);\r\n          }\r\n\r\n          if (fragment.operator && fragment.operator === \"||=\" && !nonNullMergesOnly) {\r\n            const newFragment = convertLogicalMultiplyAssignment(fragment, true);\r\n\r\n            magicString.overwrite(fragment.start, fragment.end, newFragment);\r\n          }\r\n\r\n          if (fragment.operator && fragment.operator === \"??=\" && !nonNullMergesOnly) {\r\n            const newFragment = convertMergeAssignment(fragment);\r\n\r\n            magicString.overwrite(fragment.start, fragment.end, newFragment);\r\n          }\r\n\r\n          return magicString;\r\n        },\r\n      });\r\n\r\n      return {\r\n        code: magicString.toString(),\r\n        map: includeSourceMap ? magicString.generateMap() : null,\r\n      };\r\n    },\r\n  }\r\n}"],"names":["acorn","Parser","extend","jsx","allowReserved","allowImportExportEverywhere","allowHashBang","ecmaVersion","sourceType","plugins","convertNonNullMerge","fragment","identifier","left","raw","name","finalString","fragmentToReplace","JSXParser","parse","parserOptions","newFragment","escodegen","generate","type","test","consequent","alternate","right","replace","convertMergeAssignment","appropriator","expression","body","convertLogicalAssignment","additionAssignment","RollupPluginTernaryReplacementError","Error","module","exports","rollupPluginTernaryReplacement","options","exclude","map","path","RegExp","include","createFilter","excludeExtentions","includeSourceMap","nonNullMergesOnly","assignmentsOnly","transform","code","includes","extname","slice","node","error","RollupPlaginTernaryReplacementError","message","magicString","MagicString","walk","enter","operator","overwrite","start","end","convertLogicalMultiplyAssignment","toString","generateMap"],"mappings":"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"}